<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Obfuscating Sensitive Strings in Your Autohotkey Scripts</title>
<meta name="Description" content="This program allows you to obfuscate sensitive strings in your Autohotkey scripts by surrounding them with ihidestr()">

<link rel="stylesheet" href="mycss/standtemp.css" type="text/css">
<style type="text/css">
</style>
<script>
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 20 + 'px';
  }
</script>
</head>
<body>

<iframe style="border-width:0px;" src="iFrames/header.htm" onload="resizeIframe(this)" width="100%" scrolling="no"/>
</iframe>

<div id="wrapcols">

<div id="mainconts">

<iframe style="border-width:0px;float:left" src="iFrames/toplinks.htm" width="100%" onload="resizeIframe(this)" scrolling="no"/>
</iframe>

<h1>Obfuscating Sensitive Strings in Your Autohotkey Scripts</h1>
<div>
This program allows you to obfuscate any sensitive strings in your autohotkey scripts by surrounding them with the ihidestr() function. 
</div>

<h2><a href="" name="placedummyihidestr"></a>Place Dummy ihidestr Functions in Your Source Autohotkey Script</h2>
<div>
To set up your program to obfuscate literal strings, place a dummy function like this somewhere in your source code:

<br><br><font color="brown">ihidestr(thisstr)
<br>{
<br>return thisstr
<br>}</font>


<br><br>This dummy function will just return the parameter it was sent. This allows you to fully test your program before you obfuscate it. 
</div>

<h2><a href="" name="placedecodefct"></a>Place the decode Function(s) to Decode the Obfuscated Strings in Your Autohotkey Script</h2>
<div>The function to decode obfuscated literal strings must be copied to the autohotkey script files you're looking to obfuscate. Copy the decode_ihidestr() function from the OBFhidestr.ahk file in the dynamicobfusctor.ahk project into your ahk project.

<br><br>This function is included in the obfuscator source code so you can easily copy it to your projects, but it is never actually called by the obfuscator.

<br><br>You should never call the decode_ihidestr() function directly in your source code, only use the ihidestr() function directly.
</div>

<h2><a href="" name="placeihidestrcalls"></a>Surround your sensitive strings with ihidestr function(s)</h2>
<div>You can surround sensitive literal strings with 'ihidestr()'' any place you use them like in variable assignments, in function calls, in statement parameters, and in expressions. You can do stuff like this:
<br><br><font color="blue">var1:= ihidestr("some sensitive string") 
<br>somefunc(ihidestr("some sensitive string"), parameter2) </font>
</div>

<h2>At Obfuscation time some changes will happen</h2>
<div>
At obfuscation time, any literal string found passed as a parameter to ihidestr() will be replaced by an obfuscated literal string. The call to the ihidestr() function will then be replaced with a call to the decode_ihidestr() function which will then itself be obfuscated.
</div>

<h2><a href="" name="tweakihidestrfct"></a>Create Your Own Version(s) of These Functions for Greater Security</h2>
<div>It is <b>highly recommended that you make these functions your own</b> by creating your own version(s) of the encode_ihidestr() and decode_ihidestr() functions. 

<h3>To test your encode decode functions</h3>
There is a folder in this project named <b>'custom-hidestr-encoders'</b>. It also contains a few scripts that you can use as a template to design and test your own encode_ihidestr() and decode_ihidestr() literal string obfuscators.
</br>The file <b>'READ HELP OBFhidestr.ahk'</b> contains good explanation comments on how the functions work and can be modified !
</div>

<h3>To modify the current encode/decode functions</h3>
The function used by the obfuscator to convert a literal string into a obfuscated literal string is named encode_ihidestr() and is located in the OBFhidestr.ahk include file.
<br>The decode_ihidestr() function is in the OBFhidestr.ahk and should be copied to your script.
<br>This is a quite easy personalization and in fact the versions of those supplied with the obfuscator are not the versions that I used to obfuscate my own programs.

<h3>You can have multiple encode decode functions</h3>
You can have multiple encode decode functions for multiple levels of security and speed.
<br>The encode function must be preceeded by "encode_" and the decode function must have the same name as the encode one preceeded by "decode_".
<br>Then you should modify only a few lines in the Dynamic Obfuscator Source Code, file 'OBFobfuscate.ahk:
<br>At the beginning of replaceHIDESTRcalls() function :
<br><br>if your new hide function is called ihidestrB, you must have this:
<font color="blue">
<br>;DIGIDON : you can add lookforfuncs but do not forget to increase numfuncs
<br>lookforfunc1 = ihidestr
<br>lookforfunc2 = ihidestrB
<br>numfuncs = 2
</font>
<br>Then the encode function must be added to the 'OBFhidestr.ahk' and your decode function must be added to your script's code.


<h2>Increase the Security of Your decode_ Function by Fragmenting the Function</h2>
<div>The security of the decode_ functions which will be found in your obfuscated code can be increased in several easy ways. The first is to break a long decode_ function into multiple small functions:

<br><br><font color="blue">decode_hidestr(startstr)
{
<br>global
<br>;one part of the obfuscations process
<br>return decode_hidestr_2(currentstr)
<br>} 
<br>decode_hidestr_2(startstr)
<br>{
<br>global
<br>;another part of the obfuscations process
<br>return decode_hidestr_3(currentstr)
<br>}
<br>decode_hidestr_3(startstr)
<br>{
<br>global
<br>;another part of the obfuscations process
<br>return decode_hidestr_4(currentstr)
<br>}
<br>decode_hidestr_4(startstr)
<br>{
<br>global
<br>;another part of the obfuscations process
<br>return currentstr
<br>} </font>

<br><br>When you obfuscate your program and choose to randomize the order of functions and label sections, these separate parts of the decode_ function will be scattered throughout your script. Also, if Dynamic Obfuscation is being used it will not be possible for the hacker to directly search for the 'decode_hidestr_4(startstr)' function definition by just selecting that term in the statement 'return decode_hidestr_4(currentstr)'. That's because with Dynamic Obfuscation the 2 usages of that same function will look completely different!    
</div>

<h2>Increase Security Even More By Using the Use the 'Rewire Function' Feature of the Obfuscator</h2>
<div>
You can increase the security of your decode_ function even more by using the <a href="dumpcommands.htm#dumprewirefunc">rewire function path</a> capability of the obfuscator. Create a new function in your program named DECOY_decode_hidestr, and then use this command comment near the beginning of your program:

<br><br><font color="blue">;$OBFUSCATOR: $DUMP_REWIREFUNCPATH: decode_hidestr, DECOY_decode_hidestr</font>

<br><br>To create even more confusion, you might use it instead on one of the fragments of your decode_ function:

<br><br><font color="blue">;$OBFUSCATOR: $DUMP_REWIREFUNCPATH: decode_hidestr_2, DECOY_decode_hidestr_2</font>

<br><br>Once the program has passed your security tests, use these commands to wire the decode_ function up 'straight': 

<br><br><font color="blue">;$OBFUSCATOR: $DUMP_REWIRE_STRAIGHT: decode_hidestr
<br>;$OBFUSCATOR: $DUMP_REWIRE_STRAIGHT: decode_hidestr_2</font>
 
</div>

</div>

<div id="rightcol">

</div>

</div>

</body>
</html>
